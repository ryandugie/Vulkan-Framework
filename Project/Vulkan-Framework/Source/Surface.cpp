/****************************************************************************/
/*!
\Author
   Ryan Dugie
\brief
    Copyright (c) Ryan Dugie. All rights reserved.
    Licensed under the Apache License 2.0
*/
/****************************************************************************/
/*============================================================================*\
|| ------------------------------ INCLUDES ---------------------------------- ||
\*============================================================================*/

#include "VULKANPCH.hpp"
#include "Surface.hpp"
#include <stdexcept>

/*============================================================================*\
|| --------------------------- GLOBAL VARIABLES ----------------------------- ||
\*============================================================================*/

/*============================================================================*\
|| -------------------------- STATIC FUNCTIONS ------------------------------ ||
\*============================================================================*/

/*============================================================================*\
|| -------------------------- PUBLIC FUNCTIONS ------------------------------ ||
\*============================================================================*/

/****************************************************************************/
/*!
\brief
  allocate the surface
*/
/****************************************************************************/
void VK::Surface::Create(VK::Instance & instance, GLFWwindow * window)
{
    if (mSurface != VK_NULL_HANDLE)
        ShutDown(instance);

    if (glfwCreateWindowSurface(instance.Get(), window, nullptr, &mSurface) != VK_SUCCESS)
    {
        DEBUG::log.Error("Surface::Create: failed to create window surface!");
        throw std::runtime_error("failed to create window surface!");
    }
}

/****************************************************************************/
/*!
\brief
  cleanup
*/
/****************************************************************************/
void VK::Surface::ShutDown(VK::Instance& instance)
{
    if (mSurface == VK_NULL_HANDLE)
        return;

    vkDestroySurfaceKHR(instance.Get(), mSurface, nullptr);
    mSurface = VK_NULL_HANDLE;
}

/****************************************************************************/
/*!
\brief
  get a pointer to the surface
*/
/****************************************************************************/
VkSurfaceKHR VK::Surface::Get() const
{
    return mSurface;
}

/****************************************************************************/
/*!
\brief
  get a pointer to a pointer to the surface
*/
/****************************************************************************/
VkSurfaceKHR* VK::Surface::GetPointerTo()
{
    return &mSurface;
}