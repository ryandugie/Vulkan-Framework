/****************************************************************************/
/*!
\Author
   Ryan Dugie
\brief
    Copyright (c) Ryan Dugie. All rights reserved.
    Licensed under the Apache License 2.0
*/
/****************************************************************************/
/*============================================================================*\
|| ------------------------------ INCLUDES ---------------------------------- ||
\*============================================================================*/

#include "VULKANPCH.hpp"
#include "Sampler.hpp"

/*============================================================================*\
|| --------------------------- GLOBAL VARIABLES ----------------------------- ||
\*============================================================================*/

/*============================================================================*\
|| -------------------------- STATIC FUNCTIONS ------------------------------ ||
\*============================================================================*/

/*============================================================================*\
|| -------------------------- PUBLIC FUNCTIONS ------------------------------ ||
\*============================================================================*/

/****************************************************************************/
/*!
\brief
  create the sampler
*/
/****************************************************************************/
void VK::Sampler::Create(VK::Device& device, VkSamplerCreateInfo& samplerInfo)
{
    if (vkCreateSampler(device.Get(), &samplerInfo, nullptr, &mSampler) != VK_SUCCESS)
    {
        DEBUG::log.Error("Sampler::Create: ", "failed to create texture sampler!");
        throw std::runtime_error("failed to create texture sampler!");
    }
}

/****************************************************************************/
/*!
\brief
  cleanup
*/
/****************************************************************************/
void VK::Sampler::ShutDown(VK::Device& device)
{
    vkDestroySampler(device.Get(), mSampler, nullptr);
}

/****************************************************************************/
/*!
\brief
  get the sampler
*/
/****************************************************************************/
VkSampler VK::Sampler::Get() const
{
    return mSampler;
}

/****************************************************************************/
/*!
\brief
  get a pointer to the sampler
*/
/****************************************************************************/
VkSampler* VK::Sampler::GetPointerTo()
{
    return &mSampler;
}