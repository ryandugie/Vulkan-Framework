/****************************************************************************/
/*!
\Author
   Ryan Dugie
\brief
    Copyright (c) Ryan Dugie. All rights reserved.
    Licensed under the Apache License 2.0
*/
/****************************************************************************/
/*============================================================================*\
|| ------------------------------ INCLUDES ---------------------------------- ||
\*============================================================================*/

#include "VULKANPCH.hpp"
#include "ImageView.hpp"

/*============================================================================*\
|| --------------------------- GLOBAL VARIABLES ----------------------------- ||
\*============================================================================*/

/*============================================================================*\
|| -------------------------- STATIC FUNCTIONS ------------------------------ ||
\*============================================================================*/

/*============================================================================*\
|| -------------------------- PUBLIC FUNCTIONS ------------------------------ ||
\*============================================================================*/

/****************************************************************************/
/*!
\brief
  allocate the Image View
*/
/****************************************************************************/
void VK::ImageView::Create(VK::Device& device, VkImageViewCreateInfo& createInfo)
{
    if (vkCreateImageView(device.Get(), &createInfo, nullptr, &mImageView) != VK_SUCCESS)
    {
        DEBUG::log.Error("ImageView::Create: ", "failed to create image views!");
        throw std::runtime_error("failed to create image views!");
    }
}

/****************************************************************************/
/*!
\brief
  cleanup
*/
/****************************************************************************/
void VK::ImageView::ShutDown(VK::Device& device)
{
    if (mImageView == VK_NULL_HANDLE)
        return;

    vkDestroyImageView(device.Get(), mImageView, nullptr);

    mImageView = VK_NULL_HANDLE;
}

/****************************************************************************/
/*!
\brief
  get this image view
*/
/****************************************************************************/
VkImageView VK::ImageView::Get() const
{
    return mImageView;
}

/****************************************************************************/
/*!
\brief
  get a pointer to to this image view
*/
/****************************************************************************/
VkImageView* VK::ImageView::GetPointerTo()
{
    return &mImageView;
}