/****************************************************************************/
/*!
\Author
   Ryan Dugie
\brief
    Copyright (c) Ryan Dugie. All rights reserved.
    Licensed under the Apache License 2.0
*/
/****************************************************************************/
/*============================================================================*\
|| ------------------------------ INCLUDES ---------------------------------- ||
\*============================================================================*/

#include "VULKANPCH.hpp"
#include "FrameBuffer.hpp"

/*============================================================================*\
|| --------------------------- GLOBAL VARIABLES ----------------------------- ||
\*============================================================================*/

/*============================================================================*\
|| -------------------------- STATIC FUNCTIONS ------------------------------ ||
\*============================================================================*/

/*============================================================================*\
|| -------------------------- PUBLIC FUNCTIONS ------------------------------ ||
\*============================================================================*/

/****************************************************************************/
/*!
\brief
  create a new framebuffer
*/
/****************************************************************************/
void VK::FrameBuffer::Create(VK::Device& device, VkFramebufferCreateInfo& info)
{
    if (vkCreateFramebuffer(device.Get(), &info, nullptr, &mFrameBuffer) != VK_SUCCESS)
    {
        DEBUG::log.Error("FrameBuffer::Create: failed to create framebuffer!");
        throw std::runtime_error("failed to create framebuffer!");
    }
}

/****************************************************************************/
/*!
\brief
  cleanup
*/
/****************************************************************************/
void VK::FrameBuffer::ShutDown(VK::Device& device)
{
    if (mFrameBuffer == VK_NULL_HANDLE)
        return;

    vkDestroyFramebuffer(device.Get(), mFrameBuffer, nullptr);
    mFrameBuffer = VK_NULL_HANDLE;
}

/****************************************************************************/
/*!
\brief
  get this framebuffer
*/
/****************************************************************************/
VkFramebuffer VK::FrameBuffer::Get() const
{
    return mFrameBuffer;
}

/****************************************************************************/
/*!
\brief
  get a pointer to this framebuffer
*/
/****************************************************************************/
VkFramebuffer* VK::FrameBuffer::GetPointerTo()
{
    return &mFrameBuffer;
}